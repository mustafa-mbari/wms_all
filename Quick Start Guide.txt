# üöÄ Quick Start Guide

## Step-by-Step Setup Instructions

### 1. Project Setup
```bash
# Create project directory
mkdir user-management-system
cd user-management-system

# Initialize npm and install dependencies
npm init -y
npm install express bcryptjs jsonwebtoken knex pg cors helmet express-rate-limit joi dotenv
npm install --save-dev nodemon

# Create directory structure
mkdir -p config middleware controllers routes migrations seeds
```

### 2. Copy the Files
Copy all the provided files to their respective directories:

#### Core Files (Required)
- `package.json` ‚Üí Root directory
- `server.js` ‚Üí Root directory  
- `.env.example` ‚Üí Root directory
- `knexfile.js` ‚Üí Root directory
- `README.md` ‚Üí Root directory
- `.gitignore` ‚Üí Root directory

#### Configuration
- `config/database.js`

#### Middleware
- `middleware/auth.js`
- `middleware/validation.js`

#### Controllers
- `controllers/authController.js`
- `controllers/usersController.js`

#### Routes
- `routes/auth.js`
- `routes/users.js`
- `routes/roles.js`

#### Database
- `migrations/001_create_base_tables.js`
- `migrations/002_create_product_tables.js`
- `migrations/003_create_system_tables.js`
- `seeds/001_permissions_and_roles.js`
- `seeds/002_default_data.js`

### 3. Environment Setup
```bash
# Copy environment template
cp .env.example .env

# Edit .env file with your PostgreSQL credentials
DB_HOST=localhost
DB_PORT=5432
DB_NAME=user_management_db
DB_USER=postgres
DB_PASSWORD=your_password
JWT_SECRET=your_very_long_and_secure_secret_key_here
PORT=3000
NODE_ENV=development
```

### 4. Database Setup
```bash
# Create PostgreSQL database
createdb user_management_db

# Run migrations
npm run migrate:latest

# Run seeds (creates default users and data)
npm run seed:run
```

### 5. Start the Server
```bash
# Development mode (with auto-reload)
npm run dev

# Production mode
npm start
```

### 6. Test the API

#### Check Server Health
```bash
curl http://localhost:3000/health
```

#### Login with Default Admin
```bash
curl -X POST http://localhost:3000/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{
    "email": "admin@example.com",
    "password": "admin123"
  }'
```

#### Use the Token to Access Protected Routes
```bash
# Replace YOUR_TOKEN with the token from login response
curl -X GET http://localhost:3000/api/users \
  -H "Authorization: Bearer YOUR_TOKEN"
```

## üìã Default Users Created by Seeds

| Username | Email | Password | Role | Permissions |
|----------|-------|----------|------|-------------|
| admin | admin@example.com | admin123 | Super Admin | All permissions |
| manager | manager@example.com | manager123 | Manager | Management level |
| employee | employee@example.com | employee123 | Employee | Basic access |

## üìö Available API Endpoints

### Authentication (`/api/auth`)
- `POST /api/auth/register` - User registration
- `POST /api/auth/login` - User login
- `GET /api/auth/profile` - Get current user profile
- `POST /api/auth/logout` - User logout
- `POST /api/auth/refresh` - Refresh token
- `POST /api/auth/change-password` - Change password
- `POST /api/auth/forgot-password` - Request password reset
- `POST /api/auth/reset-password` - Reset password with token

### Users (`/api/users`)
- `GET /api/users` - Get all users (paginated)
- `GET /api/users/:id` - Get user by ID
- `POST /api/users` - Create new user
- `PUT /api/users/:id` - Update user
- `DELETE /api/users/:id` - Delete user
- `PUT /api/users/:id/password` - Change user password
- `PUT /api/users/:id/roles` - Update user roles
- `GET /api/users/:id/permissions` - Get user permissions
- `PUT /api/users/:id/activate` - Activate user
- `PUT /api/users/:id/deactivate` - Deactivate user

## üß™ Testing Examples

### Register New User
```bash
curl -X POST http://localhost:3000/api/auth/register \
  -H "Content-Type: application/json" \
  -d '{
    "username": "johndoe",
    "email": "john@example.com",
    "password": "password123",
    "first_name": "John",
    "last_name": "Doe",
    "phone": "+1234567890"
  }'
```

### Get Users with Pagination
```bash
curl -X GET "http://localhost:3000/api/users?page=1&limit=10&search=admin" \
  -H "Authorization: Bearer YOUR_TOKEN"
```

### Create New User (Admin Only)
```bash
curl -X POST http://localhost:3000/api/users \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer YOUR_TOKEN" \
  -d '{
    "username": "newuser",
    "email": "newuser@example.com",
    "password": "password123",
    "first_name": "New",
    "last_name": "User",
    "roles": [2]
  }'
```

### Update User
```bash
curl -X PUT http://localhost:3000/api/users/2 \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer YOUR_TOKEN" \
  -d '{
    "first_name": "Updated",
    "last_name": "Name",
    "phone": "+1234567891"
  }'
```

## üîß Development Commands

```bash
# Database commands
npm run migrate:latest        # Run pending migrations
npm run migrate:rollback      # Rollback last migration
npm run migrate:make name     # Create new migration
npm run seed:run             # Run all seeds

# Server commands
npm start                    # Start production server
npm run dev                  # Start development server with nodemon
```

## üóÉÔ∏è Files Still to Create (Optional)

If you want to complete the full system, you'll need to create these additional files:

### Priority 1 (Core Features)
1. `controllers/rolesController.js` - Role management
2. `routes/products.js` - Product routes
3. `routes/warehouses.js` - Warehouse routes
4. `routes/system.js` - System routes

### Priority 2 (Extended Features)
5. `controllers/productsController.js` - Product management
6. `controllers/warehousesController.js` - Warehouse management
7. `controllers/systemController.js` - System settings
8. `middleware/rateLimiter.js` - Enhanced rate limiting
9. `middleware/logger.js` - Request logging

### Priority 3 (Optional Features)
10. `utils/helpers.js` - Helper functions
11. `services/emailService.js` - Email notifications
12. `public/index.html` - Simple frontend
13. Tests files

## üö® Troubleshooting

### Common Issues

#### Database Connection Error
```bash
# Check if PostgreSQL is running
sudo systemctl status postgresql

# Check if database exists
psql -U postgres -l

# Test connection
psql -U postgres -d user_management_db -c "SELECT 1;"
```

#### Port Already in Use
```bash
# Find process using port 3000
lsof -i :3000

# Kill the process
kill -9 PID
```

#### Migration Errors
```bash
# Check migration status
npm run migrate:status

# Rollback and try again
npm run migrate:rollback
npm run migrate:latest
```

#### Missing Dependencies
```bash
# Clean install
rm -rf node_modules package-lock.json
npm install
```

## üîí Security Notes

1. **Never commit .env file** - It contains sensitive credentials
2. **Change default passwords** - Update seed data for production
3. **Use strong JWT secrets** - Generate secure random strings
4. **Enable HTTPS in production** - Never send credentials over HTTP
5. **Implement rate limiting** - Protect against brute force attacks
6. **Validate all inputs** - Sanitize user data
7. **Use prepared statements** - Knex handles this automatically

## üìà Next Steps

1. **Complete the missing controllers** for full functionality
2. **Add email service** for password resets and notifications
3. **Implement file upload** for user avatars and product images
4. **Add API documentation** with Swagger/OpenAPI
5. **Write unit tests** for all endpoints
6. **Set up CI/CD pipeline** for automated testing and deployment
7. **Add monitoring and logging** for production environment

## ü§ù Support

If you encounter any issues:
1. Check the logs in the terminal
2. Verify your .env configuration
3. Ensure PostgreSQL is running
4. Check the API documentation at `/api/docs`
5. Test with the provided examples

Happy coding! üéâ